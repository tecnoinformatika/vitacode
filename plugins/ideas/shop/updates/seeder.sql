-- Dumping data for table october.ideas_document: ~7 rows (approximately)
INSERT INTO `ideas_document` (`name`, `description`) VALUES
  ('Installation', '<p>- First, you install this plugin:</p><p><a data-cke-saved-href="https://octobercms.com/plugin/rainlab-user" href="https://octobercms.com/plugin/rainlab-user" target="_blank">Rainlab User plugin</a></p><p>- Then, you install ideas shop plugin:</p><p>Ideas shop plugin</p><p>- Then you can install demo template of ideas shop</p><p>Ideas shop theme</p><p>- Config mail : Settings (of octoberCMS) -&gt; Mail configuration -&gt; config your mail method (Send mail, SMTP, ....)</p><p>- Config mail templage:&nbsp;Settings (of octoberCMS) -&gt; Mail Templates -&gt; config mail of ideas shop (prefix ideas.shop::*) to layout \'Ideas Shop Mail Layout\'</p><h2>Product</h2><p>- To create product, you have to create tax class first (default is nontaxable class)</p><p>- in field \'Quantity\' : left 0 if you not manage stock</p><p>- If you create configurable product, you have to create filter and filter option first</p><h2>Order</h2><p>- Click to button \'not paid\' to change payment status to \'paid\'</p><p>- In the right top corner, there is button \'return order\'. When you click this button, you will use function \'return order\'</p><p>+ You can return each product individually with checkbox \'Check\'</p><p>+ If you don\'t want to reverse quantity of this product, you can un-check checkbox in column \'Qty reverse\'</p><h2>Config Default</h2><p>Go to Settings -&gt; Config Default</p><p>You can config something here:</p><p>- When you generate coupon code, you can config prefix of coupon code and length of code</p><p>- You can choose&nbsp;mail method between \'send\' and \'queue\', default is \'send\'. If you can access to server, you should choose \'queue\'</p><p>- You can enable \'paypal\' and \'stripe\' payment method in tab \'payment\'</p><p>- In tab \'Downloable Product\' &nbsp;you can choose:</p><p>+ Download once : if this config is enable, so your customer just can download your product 1 time. Then link will be expired.</p><p>If this config is disable. Your customer can download your product in 24 hours</p><p>+ Download right after checkout: if this funcion is enable, your customer can be receive email download immediately after pay</p><h2>Config plus</h2><p>Go to Settings -&gt; Config Plus</p><p>You can config something else if you want</p><h2>Theme manager</h2><p>Go to Settings -&gt; Theme manager</p><p>field \'type\' has two value \'text\' and \'image\'.</p><p>With type \'image\' , you can add 1 image or many images (gallery)&nbsp;</p><h2>Tax class</h2><p>Go to Settings -&gt; Tax Class manager</p><p>Before create a tax class, you have to create tax rate (Settings -&gt; Tax Rate manager)</p><h2>Coupon</h2><p>Go to Settings -&gt; Coupon Manager</p><p>Create coupon:</p><p>- field \'type\' : percentage or fixed amount</p><p>- field \'Number can be used\' : number times coupon can use, leave 0 if unlimited</p><p>- field \'Number times used by a customer\' : number times one customer can use, leave 0 if unlimited</p><p>- field \'category\' : category is applied&nbsp;by this coupon, leave empty if apply for all</p><p>- field \'product\' : product is applied by this coupon, leave emtpy if apply for all</p><p>- field \'Is Logged\' : does this coupn need logged in user ?</p><h2>Mail layout</h2><p>Settings (Of october cms) -&gt; Mail template -&gt; Layouts -&gt;&nbsp;Ideas Shop Mail Layout</p><p>=&gt; you can change html and css in tab \'HTML\' and \'CSS\'</p>'),
  ('Customize and extends', '<p>If you want to change something in Ideas Shop functions (backend). You can create a plugins then override (to add more field, save data to another table, ....)</p>\r\n\r\n<p><strong>1. extends by add columns</strong></p>\r\n\r\n<p>- For example, you like to add more field&nbsp;in table \'ideas_product\'</p>\r\n\r\n<p>- Create a&nbsp;plugin, in this plugin, create more (2) fields in table \'ideas_product\', for example : \'something1\', \'something2\'</p>\r\n\r\n<p>- in boot() of this plugin, add this code to extends form of product create page</p><pre><code>//extend form\r\nEvent::listen(\r\n&nbsp; &nbsp; \'backend.form.extendFields\',\r\n&nbsp; &nbsp; function ($widget) {\r\n&nbsp; &nbsp; &nbsp; &nbsp; // Only for the Product model\r\n&nbsp; &nbsp; &nbsp; &nbsp; if (!$widget-&gt;model instanceof \\Ideas\\Shop\\Models\\Products) {\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;\r\n&nbsp; &nbsp; &nbsp; &nbsp; }\r\n&nbsp; &nbsp; &nbsp; &nbsp; $widget-&gt;addTabFields([\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'something1\' =&gt; [\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'tab\' =&gt; \'other_tab\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'label\' =&gt; \'something1\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'span\' =&gt; \'left\'\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'something2\' =&gt; [\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'tab\' =&gt; \'other_tab\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'label\' =&gt; \'something2\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'span\' =&gt; \'left\'\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]\r\n&nbsp; &nbsp; &nbsp; &nbsp; ]);\r\n&nbsp; &nbsp; &nbsp; &nbsp; // Remove some fields\r\n&nbsp; &nbsp; &nbsp; &nbsp; //$widget-&gt;removeField(\'qty\');\r\n&nbsp; &nbsp; &nbsp; &nbsp; //$widget-&gt;removeField(\'price_promotion\');\r\n&nbsp; &nbsp; }\r\n);</code></pre>\r\n\r\n<p><strong>2. extends by use event of ideas shop</strong></p>\r\n\r\n<p>for example,we can add more field in create page, but name of field has prefix \'_\' &nbsp;: \'_something1\', \'_something2\'</p><pre><code>....\r\n&nbsp;$widget-&gt;addTabFields([\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'_something1\' =&gt; [\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'tab\' =&gt; \'other_tab\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'label\' =&gt; \'something1\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'span\' =&gt; \'left\'\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'_something2\' =&gt; [\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'tab\' =&gt; \'other_tab\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'label\' =&gt; \'something2\',\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \'span\' =&gt; \'left\'\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]\r\n&nbsp; &nbsp; &nbsp; &nbsp; ]);</code></pre>\r\n\r\n<p>Then, in&nbsp;boot() function:</p><pre><code>Event::listen(\'ideas.shop.save_product\', function ($productSaved, $post) {\r\n&nbsp; &nbsp; var_dump($productSaved);\r\n&nbsp; &nbsp; echo \'&lt;br/&gt;\';\r\n&nbsp; &nbsp; var_dump($post);\r\n&nbsp; &nbsp; die;\r\n});</code></pre>\r\n\r\n<p>=&gt; we use event \'ideas.shop.save_product\' to save \'_something1\' and \'_something2\' field data to another table</p>'),
  ('Override component views', '<p>Ideas Shop has some components for frontend. If you like to change your theme. You can override component of Ideas Shop.</p><p>For example:</p><p>If you like to override product list. You can create a file name \'product_list.htm\' in your_theme/partials/product.</p><p>You can copy code from \'/plugins/ideas/shop/components/product/product_list.htm\' then customize to whatever you want</p>'),
  ('Add payment method', '<p>- Override checkout/checkout.htm</p>\r\n\r\n<p>Create file \'checkout.htm\' in your_theme/partials/partials/ with code of file checkout.htm&nbsp;in component Checkout of IdeasShop, then change this code</p><pre><code>&lt;div class="checkbox"&gt;\r\n&nbsp; &nbsp; &lt;label&gt;&lt;input type="radio" name="payment_method" value="1"&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="text-grey"&gt;Cash on delivery&lt;/span&gt;&lt;/label&gt;&lt;br/&gt;\r\n\r\n&nbsp; &nbsp; {% if paypal == enable %}\r\n&nbsp; &nbsp; &lt;label&gt;&lt;input type="radio" name="payment_method" value="2"&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="text-grey"&gt;Paypal&lt;/span&gt;&lt;/label&gt;&lt;br/&gt;\r\n&nbsp; &nbsp; {% endif %}\r\n\r\n&nbsp; &nbsp; {% if stripe == enable %}\r\n&nbsp; &nbsp; &lt;label&gt;&lt;input type="radio" name="payment_method" value="3"&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="text-grey"&gt;Stripe&lt;/span&gt;&lt;/label&gt;&lt;br/&gt;\r\n&nbsp; &nbsp; {% endif %}\r\n\r\n&nbsp; &nbsp; &lt;label&gt;&lt;input type="radio" name="payment_method" value="4"&gt;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &lt;span class="text-grey"&gt;Other&lt;/span&gt;&lt;/label&gt;&lt;br/&gt;\r\n&lt;/div&gt;</code></pre>\r\n\r\n<p>=&gt; There are 3 payment method in IdeasShop : CoD, paypal, stripe with value:&nbsp;1, 2, 3</p>\r\n\r\n<p>=&gt; If you add more method, you can set from 4</p>\r\n\r\n<p>- You create your Component, then add component after component \'Checkout\' of IdeasShop:</p><pre><code>[Ideas\\Shop\\Components\\Checkout Checkout]\r\n[Ideas\\Shop\\Components\\AnotherPayment AnotherPayment]\r\n</code></pre>\r\n\r\n<p>- in your component, for example : \'AnotherPayment\', you add a file js:</p><pre><code>&nbsp; public function onRun()\r\n&nbsp; &nbsp; {\r\n&nbsp; &nbsp; &nbsp; &nbsp; $this-&gt;addJs(\'/plugins/ideas/shop/assets/components/js/another_payment.js\');\r\n&nbsp; &nbsp; }</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>- file another_payment.js:</p><pre><code>$(document).ready(function() {\r\n&nbsp; &nbsp; //call event anotherPaymentMethod\r\n&nbsp; &nbsp; $(document).on(\'anotherPaymentMethod\', function(e, params) {\r\n&nbsp; &nbsp; &nbsp; &nbsp; console.log(params);\r\n&nbsp; &nbsp; &nbsp; &nbsp; console.log(params.params);\r\n&nbsp; &nbsp; &nbsp; &nbsp; console.log(params.orderId);\r\n&nbsp; &nbsp; &nbsp; &nbsp; //do something\r\n&nbsp; &nbsp; &nbsp; &nbsp; //delete cart\r\n&nbsp; &nbsp; &nbsp; &nbsp; //sessionStorage.setItem(\'cart\', \'\');\r\n&nbsp; &nbsp; });\r\n});\r\n</code></pre>\r\n\r\n<p>=&gt; this file will run event : \'anotherPaymentMethod\' of IdeasShop</p>'),
  ('Event list', '<p>- ideas.shop.save_product</p><p>-&nbsp;ideas.shop.save_category</p><p>-&nbsp;ideas.shop.save_filter</p><p>-&nbsp;ideas.shop.save_filter_option</p><p>-&nbsp;ideas.shop.save_city</p><p>-&nbsp;ideas.shop.save_coupon</p><p>-&nbsp;ideas.shop.save_currency</p><p>-&nbsp;ideas.shop.save_geo</p><p>-&nbsp;ideas.shop.save_ship</p><p>-&nbsp;ideas.shop.save_tax_rate</p><p>-&nbsp;ideas.shop.save_tax_class</p><p>- ideas.shop.save_theme</p>'),
  ('Weight Based Shipping', '<ul>  <li>Check your store\'s default weight class and currency settings (in &nbsp;Settings &gt; Config default). Make sure they\'re set to what you want.</li> <li>Check your store\'s weight class values (in &nbsp;Settings &gt; &nbsp;Weight Management). Make sure your default class is set to 1.0000, and the others are set to appropriate conversion values. For example, if your default weight class is kg, then you would set its value to 1.0000, and set the value for grams to 1000.</li>  <li>Check your store\'s default currency value (in Settings &nbsp;&gt; Config default). Make sure your default currency value is set to 1.0000.</li>  <li>Since your default weight class is used in Weight Based Shipping, make sure your rates are using the appropriate values based on this weight class. So if you\'re using the rates 1:5.00, 2:7.00, etc. with a default weight class of kg, that means, "Up to 1 kg charge 5.00, up to 2 kg charge 7.00, etc."</li> <li>Check your product weights and weight classes, and make sure they\'re set to what you want.</li></ul>'),
  ('Ideas shop mail layout', '<p>- Go to settings (of Octobercms) -&gt; Mail Template -&gt; choose mails that have prefix \'ideas.shop\' to set layout \'Ideas Shop Mail Layout\'</p><p>- Change css: Settings (of Octobercms) -&gt; Mail Template -&gt; tab \'LAYOUTS\' -&gt; choose \'Ideas Shop Mail Layout\' -&gt; choose tab \'CSS\' to change css of mail template.&nbsp;</p>');


